from django.test import TestCase
from unittest.mock import patch
from batid.services import source
import batid.services.imports.import_plots as import_plots
from batid.models import Plot
import os
from django.contrib.gis.geos import GEOSGeometry


def fixture_path(filename):
    file_dir = os.path.dirname(os.path.realpath("__file__"))
    return os.path.join(file_dir, "batid/fixtures", filename)


class ImportPlotsTestCase(TestCase):
    @patch("batid.services.imports.import_plots.Source")
    def test_import_plot_data(self, sourceMock):
        # set up the source mock to return a path to our local fixture
        source_instance = sourceMock.return_value
        source_instance.path = fixture_path("cadastre_extract.json")

        # launch the import
        import_plots.import_etalab_plots("75")

        self.assertEqual(Plot.objects.count(), 2)

        plot_1 = Plot.objects.get(id="380010000A0507")
        self.assertTrue(
            plot_1.shape
            == GEOSGeometry(
                "SRID=2154;MULTIPOLYGON (((903244.2888706872 6497030.059134159, 903416.3629750693 6496909.848735239, 903462.0676932482 6496975.65987265, 903461.6522215165 6496975.946153216, 903459.6539579318 6496977.34683543, 903437.060096818 6496993.111918309, 903422.0315617537 6497003.46017521, 903413.8336003702 6497009.122856759, 903363.7203699283 6497044.179738165, 903322.451783876 6497072.917756833, 903307.9325801353 6497082.749749457, 903290.5780950362 6497094.743784005, 903244.2888706872 6497030.059134159)))"
            )
        )

        plot_2 = Plot.objects.get(id="380010000A0142")
        self.assertTrue(
            plot_2.shape
            == GEOSGeometry(
                "SRID=2154;MULTIPOLYGON (((904094.8184559953 6497151.911480178, 904075.7089514514 6497188.312454881, 904054.3637802775 6497235.639671129, 904045.6376916899 6497243.328515565, 904056.5768304125 6497266.402638461, 904048.2018840242 6497307.559483142, 904045.698046193 6497322.332438751, 904040.8793201817 6497331.095218257, 904035.6921396146 6497339.668011279, 904030.4832612149 6497347.7178543825, 904026.603343598 6497352.889437589, 904022.3883676229 6497357.805472185, 904017.7013388589 6497362.59475689, 904012.9409532605 6497366.770488864, 903971.5235782686 6497398.0770935165, 903959.4004439425 6497412.164798001, 903939.430142256 6497414.959051915, 903870.097918357 6497416.674589694, 903866.8673582393 6497402.00063563, 903863.502927549 6497394.2001897, 903859.0603508333 6497385.241806982, 903847.3229112399 6497368.108434676, 903844.2213479255 6497364.394574121, 903833.702310665 6497344.179265995, 903864.5523746201 6497321.9332462745, 903887.8994936136 6497298.038929969, 903901.6473619473 6497285.816029801, 903915.6809907965 6497273.924850318, 903923.488902354 6497267.549901315, 903925.7506060414 6497264.324716087, 903927.0833240894 6497260.624314196, 903928.2605065642 6497247.474093458, 903931.712489195 6497228.110162698, 903935.8225743786 6497214.101486235, 903937.4319442313 6497195.209884945, 903938.8572248805 6497188.479144189, 903951.7360660557 6497148.282451339, 904035.7209818307 6497098.896437639, 904041.9171594945 6497099.701739023, 904055.8575926287 6497107.374913137, 904064.2266250869 6497111.174527173, 904065.2101334401 6497110.240425717, 904094.8184559953 6497151.911480178)))"
            )
        )
