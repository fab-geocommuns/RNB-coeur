# Generated by Django 5.2.6 on 2025-10-29 16:11

from django.db import migrations
from django.contrib.auth.models import User
from django.conf import settings

"""
Some users have unusable passwords (token-only users) that have been set by generating a random string that Django does not consider as unusable.
This works fine and achieves the goal, but Django has an explicit system to set unusable passwords.
This system is more explicit and responds accordingly to `has_usable_password()`.

This migration sets the unusable passwords explicitly.
"""


def set_unusable_passwords(apps, schema_editor):
    expected_impacted_user_count = 117
    if settings.ENVIRONMENT not in ["production", "staging", "sandbox"]:
        expected_impacted_user_count = 0

    sql = (
        "SELECT id FROM auth_user WHERE password NOT ILIKE %s AND password NOT ILIKE %s"
    )
    users_with_unusable_passwords = User.objects.raw(sql, ("%$%", "!%"))
    impacted_user_ids = [user.id for user in users_with_unusable_passwords]
    impacted_user_count = len(impacted_user_ids)
    if impacted_user_count != expected_impacted_user_count:
        raise Exception(
            f"Expected {expected_impacted_user_count} users to be impacted, but got {impacted_user_count}"
        )
    for user_id in impacted_user_ids:
        user = User.objects.get(id=user_id)
        print(f"Setting unusable password for user {user.id}")
        user.set_unusable_password()
        user.save()


class Migration(migrations.Migration):

    dependencies = [
        ("batid", "0110_create_multi_column_gist_index"),
    ]

    operations = [
        migrations.RunPython(set_unusable_passwords, migrations.RunPython.noop)
    ]
