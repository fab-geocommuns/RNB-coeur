services:

  nginx-proxy:
    container_name: nginx-proxy
    build: ./nginx
    restart: unless-stopped
    ports:
      - 443:443
      - 80:80
    depends_on:
      - web
    volumes:
      - certs:/etc/nginx/certs
      - html:/usr/share/nginx/html
      - /var/run/docker.sock:/tmp/docker.sock:ro

  nginx-letsencrypt:
    image: nginxproxy/acme-companion:2.5.0
    restart: unless-stopped
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - certs:/etc/nginx/certs
      - html:/usr/share/nginx/html
      - vhost:/etc/nginx/vhost.d
      - acme:/etc/acme.sh
    depends_on:
      - nginx-proxy

  web:
    build:
      context: ./app
      dockerfile: ./Dockerfile
      target: app_web
    ports:
      - '127.0.0.1:8000:8000'
    command: python manage.py runserver 0.0.0.0:8000
    volumes:
      - ./app:/app
    depends_on:
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_healthy
    container_name: web

  db:
    image: postgis/postgis:16-3.5
    platform: linux/amd64
    shm_size: 1gb
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      start_period: 20s
      interval: 5s
      timeout: 5s
      retries: 5

  worker:
    build:
      context: ./app
      dockerfile: ./Dockerfile
      target: app_worker
    command: watchmedo auto-restart --directory=./ --pattern=*.py --recursive -- celery -A app worker --loglevel=WARNING --concurrency=6 --uid 1000
    volumes:
      - ./app:/app
    depends_on:
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    container_name: worker

  celery_beat:
    build:
      context: ./app
      dockerfile: ./Dockerfile
      target: app_worker
    command: celery -A app beat --loglevel=WARNING
    volumes:
      - ./app:/app
    depends_on:
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_healthy
    container_name: celery_beat
    restart: unless-stopped

  rabbitmq:
    restart: unless-stopped
    image: rabbitmq:4.1-alpine
    healthcheck:
      test: ["CMD-SHELL", "rabbitmq-diagnostics -q ping"]
      interval: 15s
      retries: 5
      start_period: 20s
      timeout: 5s

  redis:
    image: redis:latest
    healthcheck:
      test: ["CMD-SHELL", "redis-cli ping"]
      start_period: 5s
      interval: 5s
      timeout: 5s
      retries: 5

  flower:
    image: mher/flower
    container_name: flower
    command: celery flower --url_prefix=flower
    depends_on:
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_healthy

  metabase:
    image: metabase/metabase
    container_name: metabase

volumes:
  postgres_data:
  rabbitmq_data:
